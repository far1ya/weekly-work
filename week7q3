#include <stdio.h>

typedef struct Process {
    int id;             // Process ID
    int burst_time;     // Burst Time
    int waiting_time;   // Waiting Time
    int turnaround_time; // Turnaround Time
    int priority;       // Priority (lower number = higher priority)
} Process;

// Function to calculate waiting and turnaround times
void calculate_times(Process processes[], int n) {
    int total_waiting_time = 0;

    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)(total_waiting_time + processes[n - 1].turnaround_time) / n);
}

int main() {
    int n;

    // Get the number of processes
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process processes[n];

    // Input burst times and priorities for each process
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1; // Process ID
        printf("Enter burst time and priority for process %d: ", i + 1);
        scanf("%d %d", &processes[i].burst_time, &processes[i].priority);
        processes[i].waiting_time = 0; // Initialize waiting time
    }

    // Sort processes based on priority (lower number = higher priority)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Calculate waiting times
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }

    // Calculate turnaround times
    calculate_times(processes, n);

    // Print the process details
    printf("\nProcess ID\tBurst Time\tWaiting Time\tTurnaround Time\tPriority\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time, processes[i].priority);
    }

    return 0;
}
